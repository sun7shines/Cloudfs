

服务端

    使用 OpenSSL 创建自签名证书

    1.创建根证书的私钥
    openssl genrsa -out ca.key 1024

    2.使用私钥创建根证书
    openssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj "/C=CN/ST=BJ/L=hd/O=FW/OU=fw109"

    3.创建服务器私钥
    openssl genrsa -out server.key 1024

    4.使用服务器私钥创建证书请求文件
    需要改localhost为访问的网络地址，若地址变化，则证书变化
    openssl req -new -key server.key -out server.csr -subj "/C=CN/ST=BJ/L=hd/O=FW/OU=localhost/CN=localhost"

    5.准备工作
    mkdir -p /etc/pki/CA/newcerts
    touch /etc/pki/CA/index.txt
    echo '01' > /etc/pki/CA/serial

    6.创建服务器证书并使用ca根证书签名
    openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key

    7 把server.key 和 server.crt 放置于/etc/swift 目录下，修改proxy-server.conf配置，如下
    
    cert_file = /etc/swift/server.crt
    key_file = /etc/swift/server.key

    #################################################
    ## ---查看不同格式文件的内容命令语法
    # openssl rsa -noout -text -in ca.key
    # openssl x509 -noout -text -in ca.crt
    # openssl rsa -noout -text -in server.key
    # openssl req -noout -text -in server.csr
    # openssl x509 -noout -text -in server.crt

    #################################################


客户端

curl -X POST -d '{"password": "123456", "email":"zhu__feng006@163.com"}' https://localhost:443/oauth/access_token  --cacert ca.crt




代码示例

client

    import socket, ssl, pprint
    import time


    socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ssl_socket = ssl.wrap_socket(socket, ca_certs="/root/ca.crt", cert_reqs=ssl.CERT_REQUIRED)
    ssl_socket.connect(('127.0.0.1', 10023))

    print repr(ssl_socket.getpeername())
    print ssl_socket.cipher()
    print pprint.pformat(ssl_socket.getpeercert())

    ssl_socket.write("Time: %s\r\n" % time.time())

    data = ssl_socket.read()
    print data

    ssl_socket.close()



server

    import socket, ssl
    import time

    cacrtf="ca/ca.crt"
    crtf="ca/server.crt"
    keyf="ca/server.key"

    server_sc = socket.socket()
    server_sc.bind(('', 10023))
    server_sc.listen(5)

    newsocket, addr = server_sc.accept()
    sc = ssl.wrap_socket(newsocket,
                         server_side=True,
                         certfile=crtf,
                         keyfile=keyf,
                         ca_certs=cacrtf)

    data = sc.read()
    print data
    sc.write('Back time: ' + str(time.time()))

    sc.close()
    server_sc.close()


